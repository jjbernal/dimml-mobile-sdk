apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'

//group = 'io.o2mc.sdk'
//version = '1.0.0'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion

  testOptions {
    unitTests.returnDefaultValues = true
  }

  defaultConfig {
    minSdkVersion 15
    targetSdkVersion 26
    versionCode 37
    versionName "1.0.0"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      debuggable true
    }
  }
}

bintray {
  user = 'edwinvrooij'
  key = '03db60f75eb48bf78b21e03bd14cb8e0de165d7d'
  filesSpec {
    from 'sdk/build/outputs/aar/sdk-release.aar'
    into '.'
  }
  pkg {
    repo = 'maven'
    name = 'dimml-mobile-sdk'
    licenses = ['MIT']
    vcsUrl = 'https://github.com/O2MC/dimml-mobile-sdk.git'
    version {
      name = '1.0.5'
    }
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

  // Third party dependencies.
  implementation 'com.jaredrummler:android-device-names:1.1.7'
  implementation 'com.google.code.gson:gson:2.8.5'
  implementation 'com.squareup.okhttp3:okhttp:3.10.0'
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    // JDK 1.8 is more strict then 1.7. Have JDK 1.8 behave like 1.7 for javadoc generation
    if (org.gradle.internal.jvm.Jvm.current().getJavaVersion() == JavaVersion.VERSION_1_8) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

afterEvaluate {
    androidJavadocs.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
}
